package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"regexp"
	"strings"
)

func main() {
	dir, err := os.Open("assets")
	failOnErr(err)
	fis, err := dir.Readdir(-1)
	failOnErr(err)

	str := "package main\n//WARNING: autogenerated, do not edit\n"
	for _, fi := range fis {
		if fi.Name() == "main.go" {
			continue
		}

		data, err := ioutil.ReadFile("assets/" + fi.Name())
		failOnErr(err)

		str += fmt.Sprintf("var %s = %#v\n",
			fileNameToIdentifier(fi.Name()),
			string(data),
		)
	}

	failOnErr(ioutil.WriteFile("assets.go", []byte(str), 0644))
}

func failOnErr(err error) {
	if err != nil {
		os.Stderr.Write([]byte(err.Error() + "\n"))
		os.Exit(1)
	}
}

var rx1 = regexp.MustCompile(`[^A-Za-z]+`)
var rx2 = regexp.MustCompile(`(?:-|^)[A-Za-z]?`)

func fileNameToIdentifier(name string) string {
	normalized := rx1.ReplaceAllString(name, "-")
	return "Asset" + rx2.ReplaceAllStringFunc(normalized, func(s string) string {
		return strings.ToUpper(strings.TrimPrefix(s, "-"))
	})
}
